% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autos.R
\name{library}
\alias{library}
\title{Wrapper around library to re-set autos}
\arguments{
\item{...}{pass directly through to base::library}
}
\value{
returns (invisibly) the list of attached packages
}
\description{
Autos need to immediately follow the global environment.
This wrapper around \code{base::library()} will reset the autos after each new
library is attached to ensure this behavior is followed.
}
\examples{
# Simple example
library(dplyr)

# Illustrative example to show that autos will always remain above attached libraries
tmpdir <- tempdir()
print(tmpdir)

# Create an example config file\
hierarchy <- glue::glue("default:
  paths:
    functions: !expr list(DEV = '{file.path(tmpdir, 'demo/DEV/username/project1/functions')}',
                          PROD = '{file.path(tmpdir, 'demo/PROD/project1/functions')}')
  autos:
     my_functions: !expr list(DEV = '{file.path(tmpdir, 'demo/DEV/username/project1/functions')}',
                              PROD = '{file.path(tmpdir, 'demo/PROD/project1/functions')}')",
                        .trim = FALSE)

# write config
writeLines(hierarchy, file.path(tmpdir, "hierarchy.yml"))

config <- config::get(file = file.path(tmpdir, "hierarchy.yml"))

build_from_config(config)

# write function to DEV
writeLines("dev_function <- function() {print(environment(dev_function))}",
           file.path(tmpdir, 'demo/DEV/username/project1/functions/dev_function.r'))

# write function to PROD
writeLines("prod_function <- function() {print(environment(prod_function))}",
           file.path(tmpdir, 'demo/PROD/project1/functions/prod_function.r'))

# setup the environment
rprofile(config::get(file = file.path(tmpdir, "hierarchy.yml")))

# show search
search()

# now attach dplyr
library(dplyr)

# see autos are still above dplyr in the search path
search()
}
